@* @page "/toast3"
@rendermode InteractiveServer
@using System
@using System.Threading


<h1>We are trying to open  toast.</h1>


<button type="button" class="btn btn-primary" @onclick="ShowToast" id="liveToastBtn">Show live toast</button>

@if (showMyToast)
{
<div class="toast-container position-fixed bottom-0 end-0 p-3">
  <div id="liveToast" class="toast show"    role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <img src="..." class="rounded me-2" alt="...">
      <strong class="me-auto">Bootstrap</strong>
      <small>11 mins ago</small>
      <button type="button" class="btn-close" @onclick="CloseToast" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Hello, world! This is a toast message.
    </div>
  </div>
</div>
}

@code {
    private Timer myTimer;

    protected override void OnInitialized()
    {
        myTimer = new Timer(state =>
        {
            InvokeAsync(() =>
            {
                // Update UI here
                StateHasChanged();
            });
        }, null, 2000, Timeout.Infinite);
    }

      private bool showMyToast = false;
      
      //private Timer? myTimer;
    
      
      private void ShowToast()
      {
        showMyToast = true;
    
         myTimer = new Timer(CloseToast, null, 2000, Timeout.Infinite);

      }

      private void CloseToast(object state)

      {
        showMyToast = false;
         InvokeAsync(() =>
          {
              showMyToast = false;
              //myTimer?.Dispose();
              myTimer.Dispose();
              StateHasChanged();
          });
      }
      

} *@